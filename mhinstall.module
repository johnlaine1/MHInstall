<?php
/**
 * @file
 * Provides a custom entity type name 'mhinstall' for tracking Manufactured home installations.
 */

/**
 * Implements hook_entity_info().
 */
function mhinstall_entity_info() {
  $info = array();
  // The custom mhinstall entity is defined here.
  // See http://drupal.org/node/1026420 and http://drupal.org/node/878804
  // for more documentation.
  $info['mhinstall'] = array(
    // Human readable label
    'label' => t('MH Install'),
    // Table for storing entity data, defined in hook_schema().
    'base table' => 'mhinstall_mhinstall',
    // This helps Entity API know how to query the custom table.
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
    ),
    // A simple wrapper around the uri mehtod in the controller class.
    'uri callback' => 'entity_class_uri',
    // Default class is 'Entity',
    'entity class' => 'MHInstallEntity',
    // Default class is 'EntityAPIController',
    'controller class' => 'MHInstallEntityController',
    // The information below is used to extend the EntityDefaultUIController.
    'admin ui' => array(
      'path' => 'admin/structure/mhinstall',
      'controller class' => 'MHInstallEntityUIController',
      'menu wildcard' => '%mhinstall',
      'file' => 'mhinstall.admin.inc',
    ),
    'module' => 'mhinstall',
    // This controls who can access entity CRUD.
    'access callback' => 'mhinstall_access',
    'fieldable' => TRUE,
    'bundles' => array(
      'mhinstall' => array(
        'label' => t('MH Install'),
        'admin' => array(
          'path' => 'admin/structure/mhinstall',
          'access arguments' => array('administer mhinstalls'),
        ),
      ),
    ),
    'views controller class' => 'EntityDefaultViewsController',
    'view modes' => array(
      'custom_view1' => array(
        'label' => t('Custom View 1'),
        'custom settings' => FALSE,
      ),      
    ),
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function mhinstall_entity_property_info() {
  $info = array();
  $properties = &$info['mhinstall']['properties'];
  $properties['id'] = array(
    'label' => t('MID'),
    'description' => t('The unique, numeric, internal ID of the mh install.'),
    'type' => 'integer',
    'schema field' => 'id',
  );
  $properties['label'] = array(
    'label' => t('MH Install ID'),
    'description' => t('The unique human readable ID of the mh install.'),
    'type' => 'text',
    'schema field' => 'label',
  );
  $properties['created'] = array(
    'label' => t('Created date'),
    'description' => t('The date the MH Install was created.'),
    'type' => 'date',
    'schema field' => 'created',
  );
  $properties['updated'] = array(
    'label' => t('Updated date'),
    'description' => t('The date the MH Install was last updated.'),
    'type' => 'date',
    'schema field' => 'updated',
  );
  return $info;
}
/**
 * Implements hook_menu().
 */
function mhinstall_menu() {
  $items = array();
  // Testing purposes.
  $items['mhinstall_entity'] = array(
    'title' => 'MH Install Demo page',
    'page callback' => 'mhinstall_demo_page',
    'access callback' => TRUE,
    'menu' => 'navigation',
  );
  $items['mhinstall/%mhinstall'] = array(
    'title' => 'MH Install',
    'page callback' => 'mhinstall_view_entity',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Menu autoloader for /mhinstall/%mhinstall.
 */
function mhinstall_load($id) {
  $mhinstall = entity_load('mhinstall', array($id));
  return array_pop($mhinstall);
}

/**
 * Callback for /mhinstall-entity.
 *
 * This is for testing purposes and can be deleted if no longer needed.
 */
function mhinstall_demo_page() {
  // Load and display an entity (don't forget to add one to the database first).
  $mhinstall = entity_load('mhinstall', array(1));
  dsm($mhinstall);

  return 'Have to return something or the page won\'t show up';
}

/**
 * Callback for /mhinstall/ID page.
 *
 * A place to render a complete video entity.
 */
function mhinstall_view_entity($mhinstall) {
  // Use any of the view modes defined in hook_entity_info().
  $viewmode = 'full'; 
  drupal_set_title($mhinstall->label);
  $mhinstall_entity = entity_view('mhinstall', array($mhinstall->id => $mhinstall), $viewmode);
  dsm($mhinstall_entity);
  return $mhinstall_entity;
}

/**
 * Access callback for mhinstall CRUD operations.
 */
function mhinstall_access($op, $mhinstall = NULL, $account = NULL) {
  if (($op == 'view' && user_access('view mhinstalls', $account)) || user_access('administer mhinstalls', $account)) {
    return TRUE;
  }
  else if (user_access('administer mhinstalls', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function mhinstall_permission() {
  return array(
    'view mhinstalls' => array(
      'title' => t('View MH Install Entities'),      
    ),
    'administer mhinstalls' => array(
      'title' => t('Administer MH Install Entities'),
    ),
  );
}
/**
 * Custom entity class.
 * The class being overriden is located in:
 * sites/all/modules/contrib/entity/includes/entity.inc
 */
class MHInstallEntity extends Entity{
  /**
   * Override this in order to implement a custom default URI.
   */
  protected function defaultUri() {
    return array('path' => 'mhinstall/' . $this->identifier());
  }
}

/**
 * Our custom controller for the mhinstall type.
 *
 * We're choosing to extend the controller provided by the entity module for
 * full CRUD support for mhinstall.
 *
 * The EntityAPIController is found in
 * sites/all/modules/contrib/entity/includes/entity.controller.inc
 */
class MHInstallEntityController extends EntityAPIController {
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    // Build page here using render arrays.
    $build['id'] = array(
      '#type' => 'markup',
      '#markup' => 'The id of this entity is ' . $entity->id . '<br>',
    );
    $build['label'] = array(
      '#type' => 'markup',
      '#markup' => 'The label of this entity is ' . $entity->label . '<br>',
    );
    $build['created'] = array(
      '#type' => 'markup',
      '#markup' => 'This entity was created on ' . date('m-d-Y', $entity->created) . '<br>',
    );
    $build['updated'] = array(
      '#type' => 'markup',
      '#markup' => 'This entity was last updated on ' . date('m-d-Y', $entity->updated) . '<br>',
    );
    
    if ($view_mode == 'custom_view1') {
      $build['custom_view1'] = array(
        '#type' => 'markup',
        '#markup' => 'This is Custom View 1',
      );
    }
    
    return $build;
  }
  
  /**
   * Override save method.
   *
   * Populate created and updated dates automatically.
   */
  public function save($entity, DatabaseTransaction $transaction = NULL) {
    if (isset($entity->is_new)) {
      $entity->created = REQUEST_TIME;
    }
    
    $entity->updated = REQUEST_TIME;
    
    return parent::save($entity, $transaction);
  }
}

/**
 * Our custom controller for the admin ui.
 *
 * The EntityDefaultUIController can be found in
 * sites/all/modules/contrib/entity/includes/entity.ui.inc
 */
class MHInstallEntityUIController extends EntityDefaultUIController {
 /**
   * Generates the table headers for the overview table.
   */
  protected function overviewTableHeaders($conditions, $rows, $additional_header = array()) {
    $header = $additional_header;
    array_unshift($header, t('MH Install'));
    if (!empty($this->entityInfo['exportable'])) {
      $header[] = t('Status');
    }
    // Add operations with the right colspan.
    $header[] = array('data' => t('Operations'), 'colspan' => $this->operationCount());
    return $header;
  }

}

